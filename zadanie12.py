# Примеры с неизменяемым типом (int) — результат одинаковый
print("Пример с неизменяемым типом (int):")
value = 5
addition = 3

result1 = value + addition
print("value + addition:", result1)  # 8

value = 5  # Сбрасываем значение
value += addition
print("value после +=:", value)     # 8

# Оба случая дают одинаковый результат для int

# Примеры c изменяемым типом (list) — результат разный
print("\n Пример с изменяемым типом (list):")

# Случай 1: value = value + addition
value = [1, 2]
addition = [3]
copy = value  # Сохраняем ссылку на исходный список

value = value + addition  # Создается НОВЫЙ список
print("Случай 1 (value = value + addition):")
print("Исходный список:", copy)
print("Новый список:", value)

# Случай 2: value += addition
value = [1, 2]
addition = [3]
copy = value  # Сохраняем ссылку на исходный список

value += addition  # Изменяем исходный список "на месте"
print("\n Случай 2 (value += addition):")
print("Исходный список изменился?:", copy)
print("Текущий список:", value)

# Разница в поведении:
# 1. Для неизменяемых типов (int, str, tuple) операторы += и =+ работают одинаково.
# 2. Для изменяемых типов (list, dict) += может менять объект "на месте", т.е. в данной ячейке памяти,
#    тогда как =+ создает новый объект. Это влияет на все переменные,
#    которые ссылались на исходный объект.
